import generate from '../';
import {writeFileSync} from 'fs';

test('example', () => {
  const output = generate(`${__dirname}/example.graphql`);
  writeFileSync(
    __dirname + '/example.ts',
    generate(`${__dirname}/example.graphql`),
  );
  expect(output).toMatchInlineSnapshot(`
    "/* tslint:disable */
    /* eslint-disable */
    // @generated
    // This file was automatically generated and should not be edited.

    import {getMethod, gql} from '@github-graph/api';

    //==============================================================
    // START Enums and Input Objects
    //==============================================================

    /**
     * Autogenerated input type of AddStar
     */
    export interface AddStarInput {
      starrableId: string;
      clientMutationId?: string | null;
    }

    //==============================================================
    // END Enums and Input Objects
    //==============================================================


    // ====================================================
    // GraphQL query operation: GetLogin
    // ====================================================

    export interface GetLogin_viewer {
      /**
       * The username used to login.
       */
      login: string;
    }

    export interface GetLogin {
      /**
       * The currently authenticated user.
       */
      viewer: GetLogin_viewer;
    }

    export const getLogin = getMethod<GetLogin, {}>(gql\`
    query GetLogin {
      viewer {
        login
      }
    }
    \`);

    // ====================================================
    // GraphQL query operation: GetStargazers
    // ====================================================

    export interface GetStargazers_repository_stargazers {
      /**
       * Identifies the total count of items in the connection.
       */
      totalCount: number;
    }

    export interface GetStargazers_repository {
      /**
       * The repository's name with owner.
       */
      nameWithOwner: string;
      /**
       * A list of users who have starred this starrable.
       */
      stargazers: GetStargazers_repository_stargazers;
    }

    export interface GetStargazers {
      /**
       * Lookup a given repository by the owner and repository name.
       */
      repository: GetStargazers_repository | null;
    }

    export interface GetStargazersVariables {
      owner: string;
      name: string;
    }

    export const getStargazers = getMethod<GetStargazers, GetStargazersVariables>(gql\`
    query GetStargazers($owner: String!, $name: String!) {
      repository(owner: $owner, name: $name) {
        nameWithOwner
        stargazers {
          totalCount
        }
      }
    }
    \`);

    // ====================================================
    // GraphQL query operation: GetWatchers
    // ====================================================

    export interface GetWatchers_repository_watchers {
      /**
       * Identifies the total count of items in the connection.
       */
      totalCount: number;
    }

    export interface GetWatchers_repository {
      /**
       * The repository's name with owner.
       */
      nameWithOwner: string;
      /**
       * A list of users watching the repository.
       */
      watchers: GetWatchers_repository_watchers;
    }

    export interface GetWatchers {
      /**
       * Lookup a given repository by the owner and repository name.
       */
      repository: GetWatchers_repository | null;
    }

    export interface GetWatchersVariables {
      owner: string;
      name: string;
    }

    export const getWatchers = getMethod<GetWatchers, GetWatchersVariables>(gql\`
    query GetWatchers($owner: String!, $name: String!) {
      repository(owner: $owner, name: $name) {
        nameWithOwner
        watchers {
          totalCount
        }
      }
    }
    \`);

    // ====================================================
    // GraphQL mutation operation: AddStar
    // ====================================================

    export interface AddStar_addStar_starrable {
      id: string;
    }

    export interface AddStar_addStar {
      /**
       * The starrable.
       */
      starrable: AddStar_addStar_starrable | null;
    }

    export interface AddStar {
      /**
       * Adds a star to a Starrable.
       */
      addStar: AddStar_addStar | null;
    }

    export interface AddStarVariables {
      input: AddStarInput;
    }

    export const addStar = getMethod<AddStar, AddStarVariables>(gql\`
    mutation AddStar($input: AddStarInput!) {
      addStar(input: $input) {
        starrable {
          id
        }
      }
    }
    \`);

    // ====================================================
    // GraphQL query operation: GetWithFragment
    // ====================================================

    export interface GetWithFragment_repository_stargazers {
      /**
       * Identifies the total count of items in the connection.
       */
      totalCount: number;
    }

    export interface GetWithFragment_repository_watchers {
      /**
       * Identifies the total count of items in the connection.
       */
      totalCount: number;
    }

    export interface GetWithFragment_repository {
      /**
       * The repository's name with owner.
       */
      nameWithOwner: string;
      /**
       * A list of users who have starred this starrable.
       */
      stargazers: GetWithFragment_repository_stargazers;
      /**
       * A list of users watching the repository.
       */
      watchers: GetWithFragment_repository_watchers;
    }

    export interface GetWithFragment {
      /**
       * Lookup a given repository by the owner and repository name.
       */
      repository: GetWithFragment_repository | null;
    }

    export const getWithFragment = getMethod<GetWithFragment, {}>(gql\`
    query GetWithFragment {
      repository(owner: \\"pugjs\\", name: \\"pug\\") {
        ...repo
      }
    }
    fragment repo on Repository {
      nameWithOwner
      stargazers {
        totalCount
      }
      watchers {
        totalCount
      }
    }
    \`);

    // ====================================================
    // GraphQL fragment: repo
    // ====================================================

    export interface repo_stargazers {
      /**
       * Identifies the total count of items in the connection.
       */
      totalCount: number;
    }

    export interface repo_watchers {
      /**
       * Identifies the total count of items in the connection.
       */
      totalCount: number;
    }

    export interface repo {
      /**
       * The repository's name with owner.
       */
      nameWithOwner: string;
      /**
       * A list of users who have starred this starrable.
       */
      stargazers: repo_stargazers;
      /**
       * A list of users watching the repository.
       */
      watchers: repo_watchers;
    }
    "
  `);
});

test('example syntax error', () => {
  expect(() =>
    generate(`${__dirname}/example-syntax-error.graphql`),
  ).toThrowErrorMatchingSnapshot();
});

test('example schema error', () => {
  expect(() =>
    generate(`${__dirname}/example-schema-error.graphql`),
  ).toThrowErrorMatchingSnapshot();
});
